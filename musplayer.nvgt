#include"bgt_compat.nvgt"
#include"speech.nvgt"
#include"sound_pool.nvgt"
double musicvolume=0, musicmaxvolume=120, musicpan=0, musicmaxpan=100, musicpitch=100, musicmaxpitch=200;
int musicslot, switchslot;
int applock=0, exitapp=1, pausesound=1, resumesound=1, pausefeedback=1, resumefeedback=1, shufflefeedback=1, timeadjust=1, effectstime=250, fadetime=50;
int speakmuskey=1, playsoundkey=1, paramsoundkey=1, resumekey=1, shufflekey=1, shufflesoundkey=1, timekey=1, volsound=1, pansound=1, pitchsound=1;
int volumeadjust=1, panadjust=1, pitchadjust=1, spokenvalues=1, spokenvolume=1, spokenpan=1, spokenpitch=1, resetvolume=1, resetpan=1, resetpitch=1;
string musictype="3dyw";
string musictype2="music1";
string version="2.1";
sound_pool pool, musicpool;
timer effectstimer, fadetimer;
bool alt_is_down()
{
if(key_down(KEY_LMENU) or key_down(KEY_RMENU))
{
return true;
}
return false;
}
bool control_is_down()
{
if(key_down(KEY_LCONTROL) or key_down(KEY_RCONTROL))
{
return true;
}
return false;
}
bool shift_is_down()
{
if(key_down(KEY_LSHIFT) or key_down(KEY_RSHIFT))
{
return true;
}
return false;
}

string get_new_albom(string albom,int direction)
{
string[] albomlist=find_directories("sounds/music/*");
int albomindex=-1;
for (uint i=0; i<albomlist.length(); i++)
{
if(albom==albomlist[i])
{
albomindex=i;
break;
}
}
if(albomindex==-1)
return albom;
if (direction==1)
{
if(albomindex>-1)
albomindex--;
if(albomindex<0)
albomindex=albomlist.length()-1;
}
else if (direction==2)
{
if(albomindex>-1)
albomindex++;
if(albomindex>=albomlist.length())
albomindex=0;
}
else if (direction==3)
{
if(albomindex>-1)
albomindex=random(0,albomlist.length()-1);
}
return albomlist[albomindex];
}
string get_new_track(string track, int direction)
{
    string[] tracklist = find_files("sounds/music/" + musictype + "/music*");
    
    if (tracklist.length() == 0)
        return track; // No tracks found, return the same track

    int trackindex = -1;

    // Find the index of the current track
    for (uint i = 0; i < tracklist.length(); i++)
    {
        string filename = strip_directory(tracklist[i]); // Extract only the filename
        if (filename == track)
        {
            trackindex = i;
            break;
        }
    }

    // If track wasn't found in the list, reset to the first track
    if (trackindex == -1)
        return strip_directory(tracklist[0]);

    // Move the index based on direction
    if (direction == 1) // Move backward
    {
        trackindex--;
        if (trackindex < 0) trackindex = tracklist.length() - 1; // Wrap around
    }
    else if (direction == 2) // Move forward
    {
        trackindex++;
        if (trackindex >= tracklist.length()) trackindex = 0; // Wrap around
    }
    else if (direction == 3) // Random track
    {
        trackindex = random(0, tracklist.length() - 1);
    }

    return strip_directory(tracklist[trackindex]); // Return new track name
}

string strip_directory(string path)
{
    int lastSlash = path.rfind("/"); // Find the last forward slash
    if (lastSlash == -1)
        lastSlash = path.rfind("\\"); // Check for backslash (Windows)
    if (lastSlash != -1)
        return path.substr(lastSlash + 1); // Return everything after the last slash
    return path; // If no slash is found, return the original string
}

void main()
{
show_game_window("music player, version "+version);
musplay();
}
void musplay()
{
string[] tracks=find_files("sounds/music/"+musictype+"/music*");
musictype2 = strip_directory(tracks[random(0, tracks.length() - 1)]);
musicslot=musicpool.play_stationary("sounds/music/"+musictype+"/"+musictype2,true);
musicpool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
while(true)
{
wait(5);
if(shift_is_down())
{
if(key_repeating(KEY_LEFT) and shufflekey==1)
{
if(musicpool.sound_is_playing(musicslot))
{
musicpool.destroy_sound(musicslot);
musictype2=get_new_track(musictype2,1);
musicslot=musicpool.play_stationary("sounds/music/"+musictype+"/"+musictype2,true);
musicpool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
pool.play_stationary("sounds/misc/medalbutton"+random(1,3)+".ogg",false);
speak(musictype2);
}
}
if(key_repeating(KEY_RIGHT) and shufflekey==1)
{
if(musicpool.sound_is_playing(musicslot))
{
musicpool.destroy_sound(musicslot);
musictype2=get_new_track(musictype2,2);
musicslot=musicpool.play_stationary("sounds/music/"+musictype+"/"+musictype2,true);
musicpool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
pool.play_stationary("sounds/misc/medalbutton"+random(1,3)+".ogg",false);
speak(musictype2);
}
}
if(key_repeating(KEY_UP) and fadetime!=100)
{
if(timeadjust==1)
{
speak(fadetime+10+"ms");
pool.play_stationary("sounds/misc/medalbutton"+random(1,3)+".ogg",false);
fadetime+=10;
}
}
if(key_repeating(KEY_DOWN) and fadetime!=10)
{
if(timeadjust==1)
{
speak(fadetime-10+"ms");
pool.play_stationary("sounds/misc/medalbutton"+random(1,3)+".ogg",false);
fadetime-=10;
}
}
if(key_pressed(KEY_M) and timeadjust==1)
{
speak("fade timer,"+fadetime+"ms");
}
}
if(key_repeating(KEY_LEFT) and key_up(KEY_LSHIFT) and key_up(KEY_RSHIFT) and shufflekey==1)
{
musictype=get_new_albom(musictype,1);
pool.play_stationary("sounds/misc/medalbutton"+random(1,3)+".ogg",false);
speak(musictype);
}
if(key_repeating(KEY_RIGHT) and key_up(KEY_LSHIFT) and key_up(KEY_RSHIFT) and shufflekey==1)
{
musictype=get_new_albom(musictype,2);
pool.play_stationary("sounds/misc/medalbutton"+random(1,3)+".ogg",false);
speak(musictype);
}
if(key_repeating(KEY_UP) and key_up(KEY_LSHIFT) and key_up(KEY_RSHIFT) and effectstime!=500)
{
if(timeadjust==1)
{
speak(effectstime+50+"ms");
pool.play_stationary("sounds/misc/medalbutton"+random(1,3)+".ogg",false);
effectstime+=50;
}
}
if(key_repeating(KEY_DOWN) and key_up(KEY_LSHIFT) and key_up(KEY_RSHIFT) and effectstime!=50)
{
if(timeadjust==1)
{
speak(effectstime-50+"ms");
pool.play_stationary("sounds/misc/medalbutton"+random(1,3)+".ogg",false);
effectstime-=50;
}
}
if(key_pressed(KEY_M) and key_up(KEY_LSHIFT) and key_up(KEY_RSHIFT) and timeadjust==1)
{
speak("controler timer,"+effectstime+"ms");
}
if(key_down(KEY_E))
{
volume_scroll_up();
}
if(key_down(KEY_Q))
{
volume_scroll_down();
}
if (key_pressed(KEY_S))
{
volume_step_down();
}
if (key_pressed(KEY_W))
{
volume_step_up();
}
if(key_down(KEY_K))
{
pitch_scroll_down();
}
if(key_down(KEY_I))
{
pitch_scroll_up();
}
if(key_pressed(KEY_F))
{
pitch_step_down();
}
if(key_pressed(KEY_J))
{
pitch_step_up();
}
if (key_down(KEY_A))
{
pan_scroll_down();
}
if (key_down(KEY_D))
{
pan_scroll_up();
}
if (key_pressed(KEY_Z))
{
pan_step_down();
}
if (key_pressed(KEY_C))
{
pan_step_up();
}
if(key_pressed(KEY_V) and spokenvolume==1)
{
speak("music volume,"+round(musicvolume+60/musicmaxvolume*100,2)+"percent");
}
if(key_pressed(KEY_N) and spokenpan==1)
{
speak("music pan,"+round(musicpan+50/musicmaxpan*100,2)+"percent");
}
if(key_pressed(KEY_H) and spokenpitch==1)
{
speak("music pitch,"+round(musicpitch/musicmaxpitch*100,2)+"percent");
}
if(key_pressed(KEY_L))
{
reset_volume();
}
if(key_pressed(KEY_P))
{
reset_pan();
}
if(key_pressed(KEY_T))
{
reset_pitch();
}
if(key_pressed(KEY_SEMICOLON) and speakmuskey==1)
{
speak("You're currently focused on the "+musictype+" music folder.");
}
if(key_pressed(KEY_APOSTROPHE) and speakmuskey==1)
{
speak("You're currently playing "+musictype2);
}
if(key_pressed(KEY_G) and shufflekey==1)
{
if(shufflefeedback==1)
{
switchslot=pool.play_stationary("sounds/misc/shake"+random(1,2)+".wav",false);
pool.update_sound_start_values(switchslot,musicpan,musicvolume,musicpitch);
}
if(musicpool.sound_is_playing(musicslot))
{
musicpool.destroy_sound(musicslot);
musictype2=get_new_track(musictype2,3);
musicslot=musicpool.play_stationary("sounds/music/"+musictype+"/"+musictype2,true);
musicpool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
}
}
if(key_pressed(KEY_R) and shufflekey==1)
{
if(shufflefeedback==1)
{
switchslot=pool.play_stationary("sounds/misc/shake"+random(1,2)+".wav",false);
pool.update_sound_start_values(switchslot,musicpan,musicvolume,musicpitch);
}
if(musicpool.sound_is_playing(musicslot))
{
musictype=get_new_albom(musictype,3);
musicpool.destroy_sound(musicslot);
string[] tracks=find_files("sounds/music/"+musictype+"/music*");
musicslot=musicpool.play_stationary("sounds/music/"+musictype+"/"+tracks[random(0,tracks.length()-1)],true);
musicpool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
}
}
if(key_pressed(KEY_TAB) and shufflekey==1)
{
if(shufflefeedback==1)
{
switchslot=pool.play_stationary("sounds/misc/shake"+random(1,2)+".wav",false);
pool.update_sound_start_values(switchslot,musicpan,musicvolume,musicpitch);
}
if(musicpool.sound_is_playing(musicslot))
{
musictype="3dyw";
musicpool.destroy_sound(musicslot);
string[] tracks=find_files("sounds/music/"+musictype+"/music*");
musicslot=musicpool.play_stationary("sounds/music/"+musictype+"/"+tracks[random(0,tracks.length()-1)],true);
musicpool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
}
}
if(key_pressed(KEY_SPACE) and shufflekey==1)
{
if(shufflefeedback==1)
{
switchslot=pool.play_stationary("sounds/misc/shake"+random(1,2)+".wav",false);
pool.update_sound_start_values(switchslot,musicpan,musicvolume,musicpitch);
}
if(musicpool.sound_is_playing(musicslot))
{
musictype="gc";
musicpool.destroy_sound(musicslot);
string[] tracks=find_files("sounds/music/"+musictype+"/music*");
musicslot=musicpool.play_stationary("sounds/music/"+musictype+"/"+tracks[random(0,tracks.length()-1)],true);
musicpool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
}
}
if(key_pressed(KEY_BACK) and shufflekey==1)
{
if(shufflefeedback==1)
{
switchslot=pool.play_stationary("sounds/misc/shake"+random(1,2)+".wav",false);
pool.update_sound_start_values(switchslot,musicpan,musicvolume,musicpitch);
}
if(musicpool.sound_is_playing(musicslot))
{
musictype="stw";
musicpool.destroy_sound(musicslot);
string[] tracks=find_files("sounds/music/"+musictype+"/music*");
musicslot=musicpool.play_stationary("sounds/music/"+musictype+"/"+tracks[random(0,tracks.length()-1)],true);
musicpool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
}
}
if(key_repeating(KEY_RETURN) and resumekey==1)
{
if(musicpool.sound_is_playing(musicslot))
{
if(pausefeedback==1)  switchslot=pool.play_stationary("sounds/misc/pause.wav",false);
pool.update_sound_start_values(switchslot,musicpan,musicvolume,musicpitch);
fade_pitch_pool(musicpool, target_pitch:20, mode:0);
musicpool.pause_sound(musicslot);
}
else
{
if(resumefeedback==1)  switchslot=pool.play_stationary("sounds/misc/play.wav",false);
pool.update_sound_start_values(switchslot,musicpan,musicvolume,musicpitch);
musicpool.resume_sound(musicslot);
fade_pitch_pool(musicpool, target_pitch:musicpitch, mode:1);
musicpool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
}
}
if(key_pressed(KEY_BACKSLASH) and shufflesoundkey==1)
{
if(shufflefeedback==1)
{
pool.play_stationary_extended("sounds/misc/misc7.ogg",false,0,0,-5,100,false);
speak("shuffle sounds off");
shufflefeedback=0;
}
else
{
pool.play_stationary_extended("sounds/misc/misc6.ogg",false,0,0,-5,100,false);
speak("shuffle sounds on");
shufflefeedback=1;
}
}
if(key_pressed(KEY_X) and playsoundkey==1)
{
if(pausefeedback==1 and resumefeedback==1)
{
pool.play_stationary_extended("sounds/misc/misc7.ogg",false,0,0,-5,100,false);
speak("playback sounds off");
pausefeedback=0;
resumefeedback=0;
}
else
{
pool.play_stationary_extended("sounds/misc/misc6.ogg",false,0,0,-5,100,false);
speak("playback sounds on");
pausefeedback=1;
resumefeedback=1;
}
}
if(key_pressed(KEY_B) and paramsoundkey==1)
{
if(volsound==1 and pansound==1 and pitchsound==1)
{
pool.play_stationary_extended("sounds/misc/misc7.ogg",false,0,0,-5,100,false);
speak("adjustment sounds off");
volsound=0;
pansound=0;
pitchsound=0;
}
else
{
pool.play_stationary_extended("sounds/misc/misc6.ogg",false,0,0,-5,100,false);
speak("adjustment sounds on");
volsound=1;
pansound=1;
pitchsound=1;
}
}
if(key_pressed(KEY_U) and timekey==1)
{
if(timeadjust==1)
{
pool.play_stationary_extended("sounds/misc/misc26.ogg",false,0,0,-5,100,false);
speak("timer adjustments off");
effectstime=500;
fadetime=100;
timeadjust=0;
}
else
{
pool.play_stationary_extended("sounds/misc/misc27.ogg",false,0,0,-5,100,false);
speak("timer adjustments on");
effectstime=250;
fadetime=50;
timeadjust=1;
}
}
if(key_pressed(KEY_Y))
{
if(applock==0)
{
speak("keys locked");
musicvolume=-10;
musicpool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
switchslot=pool.play_stationary("sounds/misc/lock.wav",false);
pool.update_sound_start_values(switchslot,musicpan,musicvolume,musicpitch);
applock=1;
exitapp=0;
timeadjust=0;
pausefeedback=0;
resumefeedback=0;
shufflefeedback=0;
playsoundkey=0;
paramsoundkey=0;
shufflekey=0;
shufflesoundkey=0;
speakmuskey=0;
resumekey=0;
timekey=0;
volumeadjust=0;
panadjust=0;
pitchadjust=0;
spokenvolume=0;
spokenpan=0;
spokenpitch=0;
resetvolume=0;
resetpan=0;
resetpitch=0;
}
else if(applock==1)
{
speak("keys unlocked");
musicvolume=0;
musicpool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
switchslot=pool.play_stationary("sounds/misc/unlock.wav",false);
pool.update_sound_start_values(switchslot,musicpan,musicvolume,musicpitch);
applock=0;
exitapp=1;
pausefeedback=1;
resumefeedback=1;
shufflefeedback=1;
playsoundkey=1;
paramsoundkey=1;
shufflekey=1;
shufflesoundkey=1;
speakmuskey=1;
resumekey=1;
timeadjust=1;
timekey=1;
volumeadjust=1;
panadjust=1;
pitchadjust=1;
spokenvolume=1;
spokenpan=1;
spokenpitch=1;
resetvolume=1;
resetpan=1;
resetpitch=1;
}
}
if(key_pressed(KEY_ESCAPE) and exitapp==1)
{
fade_pitch_pool(musicpool);
exit();
}
}
}

void fade_pitch_pool(sound_pool@ handle, double time=fadetime, double target_pitch=20, double amount=2, int mode=0) 
{
fadetime=time;
    if (@handle == null) return;
    bool all_faded = false;    
    while (!all_faded)
    {
        all_faded = true;
        for (uint i = 0; i < handle.items.length(); i++)
        {
            if (@handle.items[i].handle != null && handle.items[i].handle.playing)
            {
                double current_pitch = handle.items[i].handle.pitch;
                if (mode == 0)
                {
                    if (current_pitch > target_pitch)
                    {
                        double new_pitch = current_pitch - amount;
                        if (new_pitch < target_pitch) new_pitch = target_pitch;
                        handle.items[i].handle.pitch = new_pitch;
                        all_faded = false;
                    }
                }
                else if (mode == 1)
                {
                    if (current_pitch < target_pitch)
                    {
                        double new_pitch = current_pitch + amount;
                        if (new_pitch > target_pitch) new_pitch = target_pitch;
                        handle.items[i].handle.pitch = new_pitch;
                        all_faded = false;
                    }
                }
            }
        }
        wait(time);
    }    
}

void volume_scroll_down()
{
if(volumeadjust==1 and musicvolume!=-50 and effectstimer.elapsed>=effectstime)
{
if(spokenvalues==1)
{
if(volsound==1) switchslot=pool.play_stationary("sounds/misc/voluchange.wav",false);
pool.update_sound_start_values(switchslot,musicpan,musicvolume,musicpitch);
speak(musicvolume/1+49+"percent");
musicvolume-=1;
musicpool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
effectstimer.restart();
}
else if(spokenvalues==0)
{
if(volsound==1) switchslot=pool.play_stationary("sounds/misc/voluchange.wav",false);
pool.update_sound_start_values(switchslot,musicpan,musicvolume,musicpitch);
musicvolume-=1;
musicpool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
effectstimer.restart();
}
}
}
void volume_scroll_up()
{
if(volumeadjust==1 and musicvolume!=0 and effectstimer.elapsed>=effectstime)
{
if(spokenvalues==1)
{
if(volsound==1) switchslot=pool.play_stationary("sounds/misc/voluchange.wav",false);
pool.update_sound_start_values(switchslot,musicpan,musicvolume,musicpitch);
speak(musicvolume/1+51+"percent");
musicvolume+=1;
musicpool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
effectstimer.restart();
}
else if(spokenvalues==0)
{
if(volsound==1) switchslot=pool.play_stationary("sounds/misc/voluchange.wav",false);
pool.update_sound_start_values(switchslot,musicpan,musicvolume,musicpitch);
musicvolume+=1;
musicpool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
effectstimer.restart();
}
}
}
void volume_step_down()
{
if(volumeadjust==1 and musicvolume!=-50)
{
if(spokenvalues==1)
{
if(volsound==1) switchslot=pool.play_stationary("sounds/misc/voluchange.wav",false);
pool.update_sound_start_values(switchslot,musicpan,musicvolume,musicpitch);
speak(musicvolume/1+45+"percent");
musicvolume-=5;
musicpool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
}
else if(spokenvalues==0)
{
if(volsound==1) switchslot=pool.play_stationary("sounds/misc/voluchange.wav",false);
pool.update_sound_start_values(switchslot,musicpan,musicvolume,musicpitch);
musicvolume-=5;
musicpool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
}
}
}
void volume_step_up()
{
if(volumeadjust==1 and musicvolume!=0)
{
if(spokenvalues==1)
{
if(volsound==1) switchslot=pool.play_stationary("sounds/misc/voluchange.wav",false);
pool.update_sound_start_values(switchslot,musicpan,musicvolume,musicpitch);
speak(musicvolume/1+55+"percent");
musicvolume+=5;
musicpool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
}
else if(spokenvalues==0)
{
if(volsound==1) switchslot=pool.play_stationary("sounds/misc/voluchange.wav",false);
pool.update_sound_start_values(switchslot,musicpan,musicvolume,musicpitch);
musicvolume+=5;
musicpool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
}
}
}
void pitch_scroll_down()
{
if(pitchadjust==1 and musicpitch!=0 and effectstimer.elapsed>=effectstime)
{
if(spokenvalues==1)
{
if(pitchsound==1) switchslot=pool.play_stationary("sounds/misc/pitchchange.ogg",false);
pool.update_sound_start_values(switchslot,musicpan,musicvolume,musicpitch);
speak(musicpitch/2-1+"percent");
musicpitch-=2;
musicpool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
effectstimer.restart();
}
else if(spokenvalues==0)
{
if(pitchsound==1) switchslot=pool.play_stationary("sounds/misc/pitchchange.ogg",false);
pool.update_sound_start_values(switchslot,musicpan,musicvolume,musicpitch);
musicpitch-=2;
musicpool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
effectstimer.restart();
}
}
}
void pitch_scroll_up()
{
if(pitchadjust==1 and musicpitch!=200 and effectstimer.elapsed>=effectstime)
{
if(spokenvalues==1)
{
if(pitchsound==1) switchslot=pool.play_stationary("sounds/misc/pitchchange.ogg",false);
pool.update_sound_start_values(switchslot,musicpan,musicvolume,musicpitch);
speak(musicpitch/2+1+"percent");
musicpitch+=2;
musicpool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
effectstimer.restart();
}
else if(spokenvalues==0)
{
if(pitchsound==1) switchslot=pool.play_stationary("sounds/misc/pitchchange.ogg",false);
pool.update_sound_start_values(switchslot,musicpan,musicvolume,musicpitch);
musicpitch+=2;
musicpool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
effectstimer.restart();
}
}
}
void pitch_step_down()
{
if(pitchadjust==1 and musicpitch!=0)
{
if(spokenvalues==1)
{
if(pitchsound==1) switchslot=pool.play_stationary("sounds/misc/pitchchange.ogg",false);
pool.update_sound_start_values(switchslot,musicpan,musicvolume,musicpitch);
speak(musicpitch/2-5+"percent");
musicpitch-=10;
musicpool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
}
else if(spokenvalues==0)
{
if(pitchsound==1) switchslot=pool.play_stationary("sounds/misc/pitchchange.ogg",false);
pool.update_sound_start_values(switchslot,musicpan,musicvolume,musicpitch);
musicpitch-=10;
musicpool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
}
}
}
void pitch_step_up()
{
if(pitchadjust==1 and musicpitch!=200)
{
if(spokenvalues==1)
{
if(pitchsound==1) switchslot=pool.play_stationary("sounds/misc/pitchchange.ogg",false);
pool.update_sound_start_values(switchslot,musicpan,musicvolume,musicpitch);
speak(musicpitch/2+5+"percent");
musicpitch+=10;
musicpool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
}
else if(spokenvalues==0)
{
if(pitchsound==1) switchslot=pool.play_stationary("sounds/misc/pitchchange.ogg",false);
pool.update_sound_start_values(switchslot,musicpan,musicvolume,musicpitch);
musicpitch+=10;
musicpool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
}
}
}
void pan_scroll_down()
{
if(panadjust==1 and musicpan!=-50 and effectstimer.elapsed>=effectstime)
{
if(spokenvalues==1)
{
if(pansound==1) switchslot=pool.play_stationary("sounds/misc/panchange.wav",false);
pool.update_sound_start_values(switchslot,musicpan,musicvolume,musicpitch);
speak(musicpan/1+49+"percent");
musicpan-=1;
musicpool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
effectstimer.restart();
}
else if(spokenvalues==0)
{
if(pansound==1) switchslot=pool.play_stationary("sounds/misc/panchange.wav",false);
pool.update_sound_start_values(switchslot,musicpan,musicvolume,musicpitch);
musicpan-=1;
musicpool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
effectstimer.restart();
}
}
}
void pan_scroll_up()
{
if(panadjust==1 and musicpan!=50 and effectstimer.elapsed>=effectstime)
{
if(spokenvalues==1)
{
if(pansound==1) switchslot=pool.play_stationary("sounds/misc/panchange.wav",false);
pool.update_sound_start_values(switchslot,musicpan,musicvolume,musicpitch);
speak(musicpan/1+51+"percent");
musicpan+=1;
musicpool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
effectstimer.restart();
}
else if(spokenvalues==0)
{
if(pansound==1) switchslot=pool.play_stationary("sounds/misc/panchange.wav",false);
pool.update_sound_start_values(switchslot,musicpan,musicvolume,musicpitch);
musicpan+=1;
musicpool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
effectstimer.restart();
}
}
}
void pan_step_down()
{
if(panadjust==1 and musicpan!=-50)
{
if(spokenvalues==1)
{
if(pansound==1) switchslot=pool.play_stationary("sounds/misc/panchange.wav",false);
pool.update_sound_start_values(switchslot,musicpan,musicvolume,musicpitch);
speak(musicpan/1+45+"percent");
musicpan-=5;
musicpool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
}
else if(spokenvalues==0)
{
if(pansound==1) switchslot=pool.play_stationary("sounds/misc/panchange.wav",false);
pool.update_sound_start_values(switchslot,musicpan,musicvolume,musicpitch);
musicpan-=5;
musicpool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
}
}
}
void pan_step_up()
{
if(panadjust==1 and musicpan!=50)
{
if(spokenvalues==1)
{
if(pansound==1) switchslot=pool.play_stationary("sounds/misc/panchange.wav",false);
pool.update_sound_start_values(switchslot,musicpan,musicvolume,musicpitch);
speak(musicpan/1+55+"percent");
musicpan+=5;
musicpool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
}
else if(spokenvalues==0)
{
if(pansound==1) switchslot=pool.play_stationary("sounds/misc/panchange.wav",false);
pool.update_sound_start_values(switchslot,musicpan,musicvolume,musicpitch);
musicpan+=5;
musicpool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
}
}
}
void reset_volume()
{
if(musicvolume==0 and resetvolume==1)
{
speak("Volume is already reset.");
}
else if(musicvolume<=0 and resetvolume==1)
{
speak("volume reset");
musicvolume=0;
musicpool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
}
}
void reset_pan()
{
if(musicpan==0 and resetpan==1)
{
speak("Pan is already reset.");
}
else if(musicpan<=50 and resetpan==1)
{
speak("pan reset");
musicpan=0;
musicpool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
}
}
void reset_pitch()
{
if(musicpitch==100 and resetpitch==1)
{
speak("Pitch is already reset");
}
else if(musicpitch<=200 and resetpitch==1)
{
speak("pitch reset");
musicpitch=100;
musicpool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
}
}
