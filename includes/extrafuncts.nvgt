bool alt_is_down()
{
if(key_down(KEY_LMENU) or key_down(KEY_RMENU))
{
return true;
}
return false;
}
bool control_is_down()
{
if(key_down(KEY_LCONTROL) or key_down(KEY_RCONTROL))
{
return true;
}
return false;
}
bool shift_is_down()
{
if(key_down(KEY_LSHIFT) or key_down(KEY_RSHIFT))
{
return true;
}
return false;
}
double clamp(double value, double min, double max)
{
value=value<min? min:value;
value=value>max? max:value;
return value;
}
double min(double a, double b)
{
return (a < b) ? a : b;
}
double max(double a, double b)
{
return (a > b) ? a : b;
}
string find_sound(string soundname)
{
string[] snd=find_files(soundname);
if (snd.length()>0)
{
string[] a_path=string_split(soundname,"/",true);
string path=string_replace(soundname,a_path[a_path.length()-1],"",true);
return path+snd[random(0,snd.length()-1)];
}
else
return "";
}
string format_time(float milliseconds)
{
    int totalSeconds = int(milliseconds / 1000.0);
    int minutes = totalSeconds / 60;
    int seconds = totalSeconds % 60;
    return format_int(minutes) + ":" + (seconds < 10 ? "0" : "") + format_int(seconds);
}
string get_new_album(string album,int direction)
{
string[] albumlist=find_directories("sounds/music/*");
albumlist.sort(natural_number_sort);
int albumindex=-1;
for (uint i=0; i<albumlist.length(); i++)
{
if(album==albumlist[i])
{
albumindex=i;
break;
}
}
if(albumindex==-1)
return album;
if (direction==1)
{
if(albumindex>-1)
albumindex--;
if(albumindex<0)
albumindex=albumlist.length()-1;
}
else if (direction==2)
{
if(albumindex>-1)
albumindex++;
if(albumindex>=albumlist.length())
albumindex=0;
}
else if (direction==3)
{
if(albumindex>-1)
albumindex=random(0,albumlist.length()-1);
}
return albumlist[albumindex];
}
string get_new_track(string track, int direction)
{
    string[] tracklist = find_files("sounds/music/" + musictype + "/music*");    
tracklist.sort(natural_number_sort);
    if (tracklist.length() == 0)
        return track;
    int trackindex = -1;
    for (uint i = 0; i < tracklist.length(); i++)
    {
        string filename = strip_directory(tracklist[i]);
        if (filename == track)
        {
            trackindex = i;
            break;
        }
    }
    if (trackindex == -1)
        return strip_directory(tracklist[0]);
    if (direction == 1)
    {
        trackindex--;
        if (trackindex < 0) trackindex = tracklist.length() - 1;
    }
    else if (direction == 2)
    {
        trackindex++;
        if (trackindex >= tracklist.length()) trackindex = 0;
    }
    else if (direction == 3)
    {
        trackindex = random(0, tracklist.length() - 1);
    }
    return strip_directory(tracklist[trackindex]);
}
string strip_extension(string filename)
{
    int dotIndex = filename.rfind(".");
    if (dotIndex != -1)
    {
        return filename.substr(0, dotIndex);
    }
    return filename;
}
string strip_directory(string path)
{
    int lastSlash = path.rfind("/");
    if (lastSlash == -1)
        lastSlash = path.rfind("\\");
    if (lastSlash != -1)
        return path.substr(lastSlash + 1);
    return path;
}
