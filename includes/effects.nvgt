void volume_scroll_down()
{
if(volumeadjust==1 and musicvolume!=-50 and effectstimer.elapsed>=effectstime)
{
if(spokenvalues==1)
{
if(volsound==1) switchslot=pool.play_stationary("voluchange.wav",false);
speak(musicvolume-1);
musicvolume-=1;
pool.update_sound_start_values(switchslot,musicpan,musicvolume,musicpitch);
musicpool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
effectstimer.restart();
}
else if(spokenvalues==0)
{
if(volsound==1) switchslot=pool.play_stationary("voluchange.wav",false);
musicvolume-=1;
pool.update_sound_start_values(switchslot,musicpan,musicvolume,musicpitch);
musicpool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
effectstimer.restart();
}
}
}
void volume_scroll_up()
{
if(volumeadjust==1 and musicvolume!=0 and effectstimer.elapsed>=effectstime)
{
if(spokenvalues==1)
{
if(volsound==1) switchslot=pool.play_stationary("voluchange.wav",false);
speak(musicvolume+1);
musicvolume+=1;
pool.update_sound_start_values(switchslot,musicpan,musicvolume,musicpitch);
musicpool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
effectstimer.restart();
}
else if(spokenvalues==0)
{
if(volsound==1) switchslot=pool.play_stationary("voluchange.wav",false);
musicvolume+=1;
pool.update_sound_start_values(switchslot,musicpan,musicvolume,musicpitch);
musicpool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
effectstimer.restart();
}
}
}
void volume_step_down()
{
if(volumeadjust==1 and musicvolume!=-50)
{
if(spokenvalues==1)
{
if(volsound==1) switchslot=pool.play_stationary("voluchange.wav",false);
speak(musicvolume-5);
musicvolume-=5;
pool.update_sound_start_values(switchslot,musicpan,musicvolume,musicpitch);
musicpool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
}
else if(spokenvalues==0)
{
if(volsound==1) switchslot=pool.play_stationary("voluchange.wav",false);
musicvolume-=5;
pool.update_sound_start_values(switchslot,musicpan,musicvolume,musicpitch);
musicpool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
}
}
}
void volume_step_up()
{
if(volumeadjust==1 and musicvolume!=0)
{
if(spokenvalues==1)
{
if(volsound==1) switchslot=pool.play_stationary("voluchange.wav",false);
speak(musicvolume+5);
musicvolume+=5;
pool.update_sound_start_values(switchslot,musicpan,musicvolume,musicpitch);
musicpool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
}
else if(spokenvalues==0)
{
if(volsound==1) switchslot=pool.play_stationary("voluchange.wav",false);
musicvolume+=5;
pool.update_sound_start_values(switchslot,musicpan,musicvolume,musicpitch);
musicpool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
}
}
}
void pitch_scroll_down()
{
if(pitchadjust==1 and musicpitch!=10 and effectstimer.elapsed>=effectstime)
{
if(spokenvalues==1)
{
if(pitchsound==1) switchslot=pool.play_stationary("pitchchange.ogg",false);
speak(musicpitch-1);
musicpitch-=1;
pool.update_sound_start_values(switchslot,musicpan,musicvolume,musicpitch);
musicpool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
effectstimer.restart();
}
else if(spokenvalues==0)
{
if(pitchsound==1) switchslot=pool.play_stationary("pitchchange.ogg",false);
musicpitch-=1;
pool.update_sound_start_values(switchslot,musicpan,musicvolume,musicpitch);
musicpool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
effectstimer.restart();
}
}
}
void pitch_scroll_up()
{
if(pitchadjust==1 and musicpitch!=500 and effectstimer.elapsed>=effectstime)
{
if(spokenvalues==1)
{
if(pitchsound==1) switchslot=pool.play_stationary("pitchchange.ogg",false);
speak(musicpitch+1);
musicpitch+=1;
pool.update_sound_start_values(switchslot,musicpan,musicvolume,musicpitch);
musicpool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
effectstimer.restart();
}
else if(spokenvalues==0)
{
if(pitchsound==1) switchslot=pool.play_stationary("pitchchange.ogg",false);
musicpitch+=1;
pool.update_sound_start_values(switchslot,musicpan,musicvolume,musicpitch);
musicpool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
effectstimer.restart();
}
}
}
void pitch_step_down()
{
if(pitchadjust==1 and musicpitch!=10)
{
if(spokenvalues==1)
{
if(pitchsound==1) switchslot=pool.play_stationary("pitchchange.ogg",false);
speak(musicpitch-5);
musicpitch-=5;
pool.update_sound_start_values(switchslot,musicpan,musicvolume,musicpitch);
musicpool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
}
else if(spokenvalues==0)
{
if(pitchsound==1) switchslot=pool.play_stationary("pitchchange.ogg",false);
musicpitch-=5;
pool.update_sound_start_values(switchslot,musicpan,musicvolume,musicpitch);
musicpool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
}
}
}
void pitch_step_up()
{
if(pitchadjust==1 and musicpitch!=500)
{
if(spokenvalues==1)
{
if(pitchsound==1) switchslot=pool.play_stationary("pitchchange.ogg",false);
speak(musicpitch+5);
musicpitch+=5;
pool.update_sound_start_values(switchslot,musicpan,musicvolume,musicpitch);
musicpool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
}
else if(spokenvalues==0)
{
if(pitchsound==1) switchslot=pool.play_stationary("pitchchange.ogg",false);
musicpitch+=5;
pool.update_sound_start_values(switchslot,musicpan,musicvolume,musicpitch);
musicpool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
}
}
}
void pan_scroll_down()
{
if(panadjust==1 and musicpan!=-50 and effectstimer.elapsed>=effectstime)
{
if(spokenvalues==1)
{
if(pansound==1) switchslot=pool.play_stationary("panchange.wav",false);
speak(musicpan-1);
musicpan-=1;
pool.update_sound_start_values(switchslot,musicpan,musicvolume,musicpitch);
musicpool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
effectstimer.restart();
}
else if(spokenvalues==0)
{
if(pansound==1) switchslot=pool.play_stationary("panchange.wav",false);
musicpan-=1;
pool.update_sound_start_values(switchslot,musicpan,musicvolume,musicpitch);
musicpool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
effectstimer.restart();
}
}
}
void pan_scroll_up()
{
if(panadjust==1 and musicpan!=50 and effectstimer.elapsed>=effectstime)
{
if(spokenvalues==1)
{
if(pansound==1) switchslot=pool.play_stationary("panchange.wav",false);
speak(musicpan+1);
musicpan+=1;
pool.update_sound_start_values(switchslot,musicpan,musicvolume,musicpitch);
musicpool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
effectstimer.restart();
}
else if(spokenvalues==0)
{
if(pansound==1) switchslot=pool.play_stationary("panchange.wav",false);
musicpan+=1;
pool.update_sound_start_values(switchslot,musicpan,musicvolume,musicpitch);
musicpool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
effectstimer.restart();
}
}
}
void pan_step_down()
{
if(panadjust==1 and musicpan!=-50)
{
if(spokenvalues==1)
{
if(pansound==1) switchslot=pool.play_stationary("panchange.wav",false);
speak(musicpan-5);
musicpan-=5;
pool.update_sound_start_values(switchslot,musicpan,musicvolume,musicpitch);
musicpool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
}
else if(spokenvalues==0)
{
if(pansound==1) switchslot=pool.play_stationary("panchange.wav",false);
musicpan-=5;
pool.update_sound_start_values(switchslot,musicpan,musicvolume,musicpitch);
musicpool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
}
}
}
void pan_step_up()
{
if(panadjust==1 and musicpan!=50)
{
if(spokenvalues==1)
{
if(pansound==1) switchslot=pool.play_stationary("panchange.wav",false);
speak(musicpan+5);
musicpan+=5;
pool.update_sound_start_values(switchslot,musicpan,musicvolume,musicpitch);
musicpool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
}
else if(spokenvalues==0)
{
if(pansound==1) switchslot=pool.play_stationary("panchange.wav",false);
musicpan+=5;
pool.update_sound_start_values(switchslot,musicpan,musicvolume,musicpitch);
musicpool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
}
}
}
void reset_volume()
{
if(musicvolume==0 and resetvolume==1)
{
speak("Volume is already reset.");
}
else if(musicvolume<=0 || musicvolume>=0 and resetvolume==1)
{
if(volsound==1) switchslot=pool.play_stationary("voluchange.wav",false);
speak("volume reset");
musicvolume=0;
pool.update_sound_start_values(switchslot,musicpan,musicvolume,musicpitch);
musicpool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
}
}
void reset_pan()
{
if(musicpan==0 and resetpan==1)
{
speak("Pan is already reset.");
}
else if(musicpan<=50 || musicpan>=50 and resetpan==1)
{
if(pansound==1) switchslot=pool.play_stationary("panchange.wav",false);
speak("pan reset");
musicpan=0;
pool.update_sound_start_values(switchslot,musicpan,musicvolume,musicpitch);
musicpool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
}
}
void reset_pitch()
{
if(musicpitch==100 and resetpitch==1)
{
speak("Pitch is already reset");
}
else if(musicpitch<=500 || musicpitch>=500 and resetpitch==1)
{
if(pitchsound==1) switchslot=pool.play_stationary("pitchchange.ogg",false);
speak("pitch reset");
musicpitch=100;
pool.update_sound_start_values(switchslot,musicpan,musicvolume,musicpitch);
musicpool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
}
}
