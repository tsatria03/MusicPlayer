#pragma document docks
#pragma embed "data/assets.plr"
#include"includes/includes.nvgt"
double musicvolume=0, musicpan=0, musicpitch=100;
int musicslot, switchslot;
int applock=0, exitapp=1, pausesound=1, resumesound=1, pausefeedback=1, resumefeedback=1, shufflefeedback=1, timeadjust=1, effectstime=250, fadetime=50;
int speakmuskey=1, playsoundkey=1, paramsoundkey=1, resumekey=1, shufflekey=1, shufflesoundkey=1, timekey=1, volsound=1, pansound=1, pitchsound=1;
int volumeadjust=1, panadjust=1, pitchadjust=1, spokenvalues=0, spokenvolume=1, spokenpan=1, spokenpitch=1, resetvolume=1, resetpan=1, resetpitch=1;
string musictype="3dyw";
string musictype2="music1";
string playingMusictype=musictype;
string version="2.5";
instance appstence("mpl");
sound_pool pool, musicpool;
timer effectstimer, fadetimer;
void main()
{
set_sound_storage("*");
set_sound_decryption_key("yLnhpXN6@VL=DP&o*7O#Uz)tNHR?!tJUaQ4RP9MO%=ZjL9B",true);
show_window("music player, version "+version);
if(appstence.is_already_running)
{
alert("error", "You can only have one instence of this app running!");
exit();
}
else
{
musplay();
}
}
void musplay()
{
string[] albums = find_directories("sounds/music/*");
if(albums.length()>0) musictype = albums[random(0, albums.length() - 1)];
string[] tracks = find_files("sounds/music/" + musictype + "/music*");
if(tracks.length()>0)
{
tracks.sort(natural_number_sort);
musictype2 = strip_directory(tracks[random(0, tracks.length() - 1)]);
playingMusictype = musictype;
musicslot = musicpool.play_stationary("sounds/music/" + musictype + "/" + musictype2, true);
musicpool.update_sound_start_values(musicslot, musicpan, musicvolume, musicpitch);
}
while(true)
{
wait(5);
if(control_is_down() or shift_is_down())
{
if(key_repeating(KEY_LEFT) and shufflekey==1)
{
pool.play_stationary("prev.wav",false);
if(musicpool.sound_is_playing(musicslot))
{
musicpool.destroy_sound(musicslot);
musictype2=get_new_track(musictype2,1);
playingMusictype = musictype;
musicslot=musicpool.play_stationary("sounds/music/"+musictype+"/"+musictype2,true);
musicpool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
}
}
if(key_repeating(KEY_RIGHT) and shufflekey==1)
{
pool.play_stationary("next.wav",false);
if(musicpool.sound_is_playing(musicslot))
{
musicpool.destroy_sound(musicslot);
musictype2=get_new_track(musictype2,2);
playingMusictype = musictype;
musicslot=musicpool.play_stationary("sounds/music/"+musictype+"/"+musictype2,true);
musicpool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
}
}
if(key_repeating(KEY_UP) and fadetime!=100)
{
if(timeadjust==1)
{
speak(fadetime+10+"ms");
pool.play_stationary("medalbutton"+random(1,3)+".ogg",false);
fadetime+=10;
}
}
if(key_repeating(KEY_DOWN) and fadetime!=10)
{
if(timeadjust==1)
{
speak(fadetime-10+"ms");
pool.play_stationary("medalbutton"+random(1,3)+".ogg",false);
fadetime-=10;
}
}
if(key_repeating(KEY_M) and timeadjust==1)
{
speak("fade timer,"+fadetime+"ms");
}
}
if(key_repeating(KEY_LEFT) and !control_is_down() and !shift_is_down() and shufflekey==1)
{
pool.play_stationary("foldchange.wav",false);
if(musicpool.sound_is_playing(musicslot))
{
musicpool.destroy_sound(musicslot);
musictype=get_new_album(musictype,1);
string[] tracks = find_files("sounds/music/" + musictype + "/music*");
tracks.sort(natural_number_sort);
if (tracks.length() > 0)
{
musictype2 = strip_directory(tracks[0]);
playingMusictype = musictype;
}
musicslot=musicpool.play_stationary("sounds/music/"+musictype+"/"+musictype2,true);
musicpool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
}
}
if(key_repeating(KEY_RIGHT) and !control_is_down() and !shift_is_down() and shufflekey==1)
{
pool.play_stationary("foldchange.wav",false);
if(musicpool.sound_is_playing(musicslot))
{
musicpool.destroy_sound(musicslot);
musictype=get_new_album(musictype,2);
string[] tracks = find_files("sounds/music/" + musictype + "/music*");
tracks.sort(natural_number_sort);
if (tracks.length() > 0)
{
musictype2 = strip_directory(tracks[0]);
playingMusictype = musictype;
}
musicslot=musicpool.play_stationary("sounds/music/"+musictype+"/"+musictype2,true);
musicpool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
}
}
if(key_repeating(KEY_UP) and !control_is_down() and !shift_is_down() and effectstime!=500)
{
if(timeadjust==1)
{
speak(effectstime+50+"ms");
pool.play_stationary("medalbutton"+random(1,3)+".ogg",false);
effectstime+=50;
}
}
if(key_repeating(KEY_DOWN) and !control_is_down() and !shift_is_down() and effectstime!=50)
{
if(timeadjust==1)
{
speak(effectstime-50+"ms");
pool.play_stationary("medalbutton"+random(1,3)+".ogg",false);
effectstime-=50;
}
}
if(key_repeating(KEY_M) and !control_is_down() and !shift_is_down() and timeadjust==1)
{
speak("controler timer,"+effectstime+"ms");
}
if(key_down(KEY_E))
{
volume_scroll_up();
}
if(key_down(KEY_Q))
{
volume_scroll_down();
}
if (key_pressed(KEY_S))
{
volume_step_down();
}
if (key_pressed(KEY_W))
{
volume_step_up();
}
if(key_down(KEY_K))
{
pitch_scroll_down();
}
if(key_down(KEY_I))
{
pitch_scroll_up();
}
if(key_pressed(KEY_F))
{
pitch_step_down();
}
if(key_pressed(KEY_J))
{
pitch_step_up();
}
if (key_down(KEY_A))
{
pan_scroll_down();
}
if (key_down(KEY_D))
{
pan_scroll_up();
}
if (key_pressed(KEY_Z))
{
pan_step_down();
}
if (key_pressed(KEY_C))
{
pan_step_up();
}
if(key_repeating(KEY_V) and spokenvolume==1)
{
speak("music volume, "+musicvolume+" decibels");
}
if (key_repeating(KEY_N) and spokenpan == 1)
{
string direction = "center";
int absPan = abs(musicpan);
if (musicpan == 0)
direction = "center";
else if (absPan <= 9)
direction = musicpan < 0 ? "slightly left" : "slightly right";
else if (absPan <= 24)
direction = musicpan < 0 ? "moderately left" : "moderately right";
else if (absPan <= 39)
direction = musicpan < 0 ? "mostly left" : "mostly right";
else if (absPan <= 49)
direction = musicpan < 0 ? "hard left" : "hard right";
else
direction = musicpan < 0 ? "full left" : "full right";
speak("Music pan, " + musicpan + ": " + direction);
}
if (key_repeating(KEY_H) and spokenpitch == 1)
{
double semitones = 12 * (log(musicpitch / 100.0) / log(2.0));
if (abs(semitones) < 0.005) semitones = 0.0;
double semitoneRounded = round(semitones, 2);
speak("Music pitch, " + semitoneRounded + " semitones");
}
if(key_repeating(KEY_L) and resetvolume==1)
{
reset_volume();
}
if(key_repeating(KEY_P) and resetpan==1)
{
reset_pan();
}
if(key_repeating(KEY_T) and resetpitch==1)
{
reset_pitch();
}
if(key_repeating(KEY_SEMICOLON) and speakmuskey==1)
{
speak("You're currently focused on the "+musictype+" music folder.");
}
if(key_repeating(KEY_APOSTROPHE) and speakmuskey==1)
{
speak("You're currently playing " + strip_extension(musictype2) + " from the " + playingMusictype + " music folder.");
}
if(key_repeating(KEY_G) and shufflekey==1)
{
if(shufflefeedback==1)
{
pool.play_stationary("shake"+random(1,2)+".wav",false);
}
if(musicpool.sound_is_playing(musicslot))
{
musicpool.destroy_sound(musicslot);
musictype2=get_new_track(musictype2,3);
musicslot=musicpool.play_stationary("sounds/music/"+musictype+"/"+musictype2,true);
musicpool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
}
}
if(key_repeating(KEY_R) and shufflekey==1)
{
if(shufflefeedback==1)
{
pool.play_stationary("shake"+random(1,2)+".wav",false);
}
if(musicpool.sound_is_playing(musicslot))
{
musictype=get_new_album(musictype,3);
musicpool.destroy_sound(musicslot);
musictype2=get_new_track(musictype2,3);
playingMusictype=musictype;
musicslot=musicpool.play_stationary("sounds/music/"+musictype+"/"+musictype2,true);
musicpool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
}
}
if(key_repeating(KEY_TAB) and shufflekey==1)
{
if(shufflefeedback==1)
{
pool.play_stationary("shake"+random(1,2)+".wav",false);
}
if(musicpool.sound_is_playing(musicslot))
{
musictype="3dyw";
musicpool.destroy_sound(musicslot);
musictype2=get_new_track(musictype2,3);
playingMusictype=musictype;
musicslot=musicpool.play_stationary("sounds/music/"+musictype+"/"+musictype2,true);
musicpool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
}
}
if(key_repeating(KEY_SPACE) and shufflekey==1)
{
if(shufflefeedback==1)
{
pool.play_stationary("shake"+random(1,2)+".wav",false);
}
if(musicpool.sound_is_playing(musicslot))
{
musictype="gc";
musicpool.destroy_sound(musicslot);
musictype2=get_new_track(musictype2,3);
playingMusictype=musictype;
musicslot=musicpool.play_stationary("sounds/music/"+musictype+"/"+musictype2,true);
musicpool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
}
}
if(key_repeating(KEY_BACK) and shufflekey==1)
{
if(shufflefeedback==1)
{
pool.play_stationary("shake"+random(1,2)+".wav",false);
}
if(musicpool.sound_is_playing(musicslot))
{
musictype="stw";
musicpool.destroy_sound(musicslot);
musictype2=get_new_track(musictype2,3);
playingMusictype=musictype;
musicslot=musicpool.play_stationary("sounds/music/"+musictype+"/"+musictype2,true);
musicpool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
}
}
if(key_repeating(KEY_RETURN) and resumekey==1)
{
if(musicpool.sound_is_playing(musicslot))
{
if(pausefeedback==1)  pool.play_stationary("pause.wav",false);
fade_pitch_pool(musicpool, target_pitch:25, mode:0);
musicpool.pause_sound(musicslot);
}
else
{
if(resumefeedback==1)  pool.play_stationary("play.wav",false);
musicpool.resume_sound(musicslot);
fade_pitch_pool(musicpool, target_pitch:musicpitch, mode:1);
musicpool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
}
}
if(key_repeating(KEY_BACKSLASH) and shufflesoundkey==1)
{
if(shufflefeedback==1)
{
pool.play_stationary_extended("switchoff.ogg",false,0,0,-5,100,false);
speak("shuffle sounds off");
shufflefeedback=0;
}
else
{
pool.play_stationary_extended("switchon.ogg",false,0,0,-5,100,false);
speak("shuffle sounds on");
shufflefeedback=1;
}
}
if(key_repeating(KEY_X) and playsoundkey==1)
{
if(pausefeedback==1 and resumefeedback==1)
{
pool.play_stationary_extended("switchoff.ogg",false,0,0,-5,100,false);
speak("playback sounds off");
pausefeedback=0;
resumefeedback=0;
}
else
{
pool.play_stationary_extended("switchon.ogg",false,0,0,-5,100,false);
speak("playback sounds on");
pausefeedback=1;
resumefeedback=1;
}
}
if(key_repeating(KEY_B) and paramsoundkey==1)
{
if(volsound==1 and pansound==1 and pitchsound==1)
{
pool.play_stationary_extended("switchoff.ogg",false,0,0,-5,100,false);
speak("adjustment sounds off");
volsound=0;
pansound=0;
pitchsound=0;
}
else
{
pool.play_stationary_extended("switchon.ogg",false,0,0,-5,100,false);
speak("adjustment sounds on");
volsound=1;
pansound=1;
pitchsound=1;
}
}
if(key_repeating(KEY_U) and timekey==1)
{
if(timeadjust==1)
{
pool.play_stationary_extended("toggleoff.ogg",false,0,0,-5,100,false);
speak("timer adjustments off");
effectstime=500;
fadetime=100;
timeadjust=0;
}
else
{
pool.play_stationary_extended("toggleon.ogg",false,0,0,-5,100,false);
speak("timer adjustments on");
effectstime=250;
fadetime=50;
timeadjust=1;
}
}
if(key_repeating(KEY_Y))
{
if(applock==0)
{
speak("keys locked");
pool.play_stationary("lock.wav",false);
applock=1;
exitapp=0;
timeadjust=0;
pausefeedback=0;
resumefeedback=0;
shufflefeedback=0;
playsoundkey=0;
paramsoundkey=0;
shufflekey=0;
shufflesoundkey=0;
speakmuskey=0;
resumekey=0;
timekey=0;
volumeadjust=0;
panadjust=0;
pitchadjust=0;
spokenvolume=0;
spokenpan=0;
spokenpitch=0;
resetvolume=0;
resetpan=0;
resetpitch=0;
}
else if(applock==1)
{
speak("keys unlocked");
pool.play_stationary("unlock.wav",false);
applock=0;
exitapp=1;
pausefeedback=1;
resumefeedback=1;
shufflefeedback=1;
playsoundkey=1;
paramsoundkey=1;
shufflekey=1;
shufflesoundkey=1;
speakmuskey=1;
resumekey=1;
timeadjust=1;
timekey=1;
volumeadjust=1;
panadjust=1;
pitchadjust=1;
spokenvolume=1;
spokenpan=1;
spokenpitch=1;
resetvolume=1;
resetpan=1;
resetpitch=1;
}
}
if(key_pressed(KEY_ESCAPE) and exitapp==1)
{
if(musicpool.sound_is_playing(musicslot))
{
pool.play_stationary("exit.wav",false);
fade_volume_pool(musicpool);
exit();
}
else
{
dlgplay("exit.wav");
exit();
}
}
}
}
